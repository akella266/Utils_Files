val androidVersion: String
    get() = String.format("Android (%s)", Build.VERSION.SDK_INT)
val androidVersionNumber: Int
    get() = Build.VERSION.SDK_INT
val deviceName: String
    get() {
        val manufacturer = Build.MANUFACTURER
        val model = Build.MODEL
        return if (model.startsWith(manufacturer)) {
            model
        } else {
            String.format("%s %s", manufacturer, model)
        }
    }
val deviceManufacturer = Build.MANUFACTURER
val screenWidth: Int
    get() = Resources.getSystem().displayMetrics.widthPixels
val screenHeight: Int
    get() = Resources.getSystem().displayMetrics.heightPixels
fun supportMarshmallow() = Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
fun supportNougat() = Build.VERSION.SDK_INT >= Build.VERSION_CODES.N
fun supportOreo() = Build.VERSION.SDK_INT >= Build.VERSION_CODES.O
fun getAppVersion(context: Context): String {
    if (cachedAppVersion == null) {
        val versionName = getVersionName(context)
        val versionCode = "" + getVersionCode(context)
        cachedAppVersion = String.format("%s (%s)", versionName, versionCode)
    }
    return cachedAppVersion!!
}
fun getVersionCode(context: Context): Int {
    try {
        val manager = context.packageManager
        val info = manager.getPackageInfo(context.packageName, 0)
        return info.versionCode
    } catch (e: PackageManager.NameNotFoundException) {
        return -1
    }
}
fun getVersionName(context: Context): String {
    try {
        val manager = context.packageManager
        val info = manager.getPackageInfo(context.packageName, 0)
        return info.versionName
    } catch (e: PackageManager.NameNotFoundException) {
        return "n/a"
    }
}
fun generateDeviceId(): String {
    val uuid = UUID.randomUUID()
    return uuid.toString()
}
fun getNumericAppVersion(context: Context): String {
    return getAppVersion(context).split(" ".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()[0]
}
fun getDisplayMetrics(activity: Activity): DisplayMetrics {
    val display = activity.windowManager.defaultDisplay
    val metrics = DisplayMetrics()
    display.getMetrics(metrics)
    return metrics
}
fun convertDpToPixel(dp: Float): Int {
    val metrics = Resources.getSystem().displayMetrics
    val px = dp * metrics.density
    return px.roundToInt()
}
fun copyToClipboard(context: Context?, text: String) {
    val clipboard = context?.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
    val clip = ClipData.newPlainText("", text)
    clipboard.primaryClip = clip
}
fun getBitmapFromView(view: View?, callback: (Bitmap) -> Unit) {
    view?.let {
        val bitmap = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)
        it.draw(canvas)
        callback(bitmap)
    }
}
